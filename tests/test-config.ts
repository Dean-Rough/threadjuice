/**\n * Test Configuration for ThreadJuice E2E Tests\n * Provides mock configurations and utilities for testing\n */\n\n/**\n * Mock environment configuration for tests\n * These values are safe to use in test environments\n */\nexport const TEST_ENV_CONFIG = {\n  NODE_ENV: 'test',\n  NEXT_PUBLIC_APP_URL: 'http://localhost:4242',\n  \n  // Mock Supabase configuration\n  NEXT_PUBLIC_SUPABASE_URL: 'https://mock.supabase.co',\n  NEXT_PUBLIC_SUPABASE_ANON_KEY: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vY2siLCJyb2xlIjoiYW5vbiIsImlhdCI6MTY0MjQ4NDQ5OSwiZXhwIjoxOTU4MDYwNDk5fQ.mock_test_key',\n  SUPABASE_SERVICE_ROLE_KEY: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vY2siLCJyb2xlIjoic2VydmljZV9yb2xlIiwiaWF0IjoxNjQyNDg0NDk5LCJleHAiOjE5NTgwNjA0OTl9.mock_service_key',\n  \n  // Mock Clerk authentication\n  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: 'pk_test_mock_clerk_key',\n  CLERK_SECRET_KEY: 'sk_test_mock_clerk_secret',\n  \n  // Mock OpenAI\n  OPENAI_API_KEY: 'sk-mock_openai_key_for_tests',\n  \n  // Mock Reddit API\n  REDDIT_CLIENT_ID: 'mock_reddit_client',\n  REDDIT_CLIENT_SECRET: 'mock_reddit_secret',\n  REDDIT_USER_AGENT: 'ThreadJuice-Test/1.0',\n  \n  // Disabled features for tests\n  RATE_LIMIT_ENABLED: 'false',\n  CONTENT_MODERATION_ENABLED: 'false',\n};\n\n/**\n * Mock Supabase client for tests\n * Provides the same interface as the real Supabase client\n */\nexport const createMockSupabaseClient = () => ({\n  from: (table: string) => ({\n    select: (columns = '*') => ({\n      eq: (column: string, value: any) => ({\n        single: () => Promise.resolve({ \n          data: getMockPostData(value), \n          error: null \n        }),\n        order: (column: string, options?: any) => ({\n          range: (start: number, end: number) => Promise.resolve({\n            data: getMockPostsData().slice(start, end + 1),\n            error: null,\n            count: getMockPostsData().length,\n          }),\n        }),\n      }),\n      order: (column: string, options?: any) => ({\n        range: (start: number, end: number) => Promise.resolve({\n          data: getMockPostsData().slice(start, end + 1),\n          error: null,\n          count: getMockPostsData().length,\n        }),\n      }),\n    }),\n    insert: (data: any) => Promise.resolve({ \n      data: [{ ...data, id: 'mock-id-' + Date.now() }], \n      error: null \n    }),\n    update: (data: any) => Promise.resolve({ \n      data: [data], \n      error: null \n    }),\n    delete: () => Promise.resolve({ \n      data: null, \n      error: null \n    }),\n  }),\n});\n\n/**\n * Mock post data for testing\n */\nfunction getMockPostData(slug?: string) {\n  if (!slug) return null;\n  \n  return {\n    id: 'mock-post-1',\n    slug: slug,\n    title: 'Mock Test Post for E2E Testing',\n    content: JSON.stringify({\n      sections: [\n        {\n          type: 'headline',\n          content: 'Mock Test Headline'\n        },\n        {\n          type: 'paragraph',\n          content: 'This is a mock post for E2E testing purposes.'\n        }\n      ]\n    }),\n    category: 'Technology',\n    tags: ['test', 'mock'],\n    author_persona: 'The Snarky Sage',\n    published: true,\n    engagement_score: 100,\n    views: 1000,\n    upvotes: 50,\n    comments: 10,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n  };\n}\n\n/**\n * Mock posts data for listing\n */\nfunction getMockPostsData() {\n  return [\n    {\n      id: 'mock-post-1',\n      slug: 'mock-test-post-1',\n      title: 'Mock Test Post 1',\n      excerpt: 'This is a mock post for testing.',\n      category: 'Technology',\n      author_persona: 'The Snarky Sage',\n      published: true,\n      engagement_score: 100,\n      views: 1000,\n      upvotes: 50,\n      comments: 10,\n      created_at: new Date().toISOString(),\n    },\n    {\n      id: 'mock-post-2',\n      slug: 'mock-test-post-2',\n      title: 'Mock Test Post 2',\n      excerpt: 'Another mock post for testing.',\n      category: 'Entertainment',\n      author_persona: 'The Down-to-Earth Buddy',\n      published: true,\n      engagement_score: 85,\n      views: 750,\n      upvotes: 30,\n      comments: 5,\n      created_at: new Date().toISOString(),\n    },\n  ];\n}\n\n/**\n * Setup test environment variables\n */\nexport function setupTestEnvironment() {\n  Object.entries(TEST_ENV_CONFIG).forEach(([key, value]) => {\n    if (!process.env[key]) {\n      process.env[key] = value;\n    }\n  });\n}\n\n/**\n * Check if we're in a test environment\n */\nexport function isTestEnvironment() {\n  return process.env.NODE_ENV === 'test' || \n         process.env.PLAYWRIGHT_TEST_BASE_URL || \n         process.env.CI === 'true';\n}